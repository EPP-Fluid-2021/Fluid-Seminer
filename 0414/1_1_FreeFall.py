"""
1.1 離散化を知る（ボールの投げ上げ問題）

dh/dt = -gt + v_0    ...(1.4)

この式を使って時刻 t_1, t_2, t_3, ... における高さ h を求める方法を考える。
時間の刻み幅 dt を一定にとり， t_n = ndt とする。
(1.4)を dh = ( -gt + v_0 )dt と書き，h_{n+1} = h_n + dh とおく。
t = t_0 = 0 のとき： h_0（初期条件）
t = t_1 = dt のとき： h_1 = h_0 + dh =  h_0 + ( -gt + v_0 )dt
t = t_2 = 2dt のとき： h_2 = h_1 + dh =  h_1 + ( -gt + v_0 )dt
：
：

一般に h_n = h_{n-1} + ( -gt + v_0 )dt

ギモン1：右辺の t には何を入れるのか？前のステップの時刻 t_{n-1} ？今のステップの時刻 t_n ？それらの平均？
→場合による。

ギモン2：この計算はどこで終わればよいのか？
→テキストの例では計算終了時刻を人間が与えてしまっているが，明らかに不自然。
→今回は初期位置 h_0 を 0 より大きく取り，地面に到達したら終わりにしたい。そこで h が 0 になるまで計算を続けることにする。
"""



# ライブラリの読み込み
import numpy as np
import matplotlib.pyplot as plt
import japanize_matplotlib
%matplotlib inline



# パラメータの設定

# 重力加速度
g = 9.8

# 初速
v_0 = 15

# 初期高さ（テキストでは0になっているが一般性がないので拡張する）
h_0 = 10

# 時間の刻み幅
dt = 0.01



# 初期値
t = 0
h = h_0



# 反復処理
"""
Pythonのwhile文を使う。
各ステップで t を dt だけ増やし，dh の値を更新し（以下の例では現在の値 t_n が採用されている），h を dh だけ増やす
h が 0 になって地面に到達したらループを抜ける。
"""

########### 方法1 ###########
# テキストにある，散布図を使う例。
# plt.scatter()で，各 (t_n, h_n) を (t, h) 平面上に図示させる。


while h >= 0:
    plt.scatter(t, h, marker='o', c= 'black')
    h += ( -g*t + v_0 )*dt
    t += dt


########### 方法1：ここまで ###########




########### 方法2 ###########
# 滑らかな曲線で描きたい場合，初期値の宣言（ t = 0, h = h_0 ）以降を次のように書き換える。
# 生成された t_n と h_n の値を格納するリストを用意して，その中に値を入れていき，最後にリストごとプロット。

"""
t_list = [0]
h_list = [h_0]

while h >= 0:
    h += ( -g*t + v_0 )*dt
    t += dt
    t_list.append(t)
    h_list.append(h)

plt.plot(t_list, h_list)
"""

########### 方法2：ここまで ###########



########### 以下は共通 ###########
#
# グラフの設定と表示
plt.xlabel('時刻')
plt.ylabel('高さ')
plt.show()
    
    
"""
地面に戻ってきた時，つまり h > 0 を満たす最後の時刻を表示する。
これはループを抜けた時刻から dt を引くことで得られる。
もちろんこの値は，正確な時刻とは言えない。
より正確に知りたい場合は刻み幅 dt を小さくすればいいが，限度がある。
"""
t_end = t-dt
print(t_end)
